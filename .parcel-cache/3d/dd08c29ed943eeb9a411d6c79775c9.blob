require('../libraries/easytimer.js/dist/easytimer.min.js');
// import '../libraries/circular-slider/dist/circular-slider.js';
// MIT License
// Copyright (c) 2018 Albert GonzÃ¡lez
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
const tabP = document.getElementById('tabP');
const tabS = document.getElementById('tabS');
const timerP = document.getElementById('timers_p');
const timerS = document.getElementById('timers_s');
const pomoStartBtn = document.getElementById("pomo-startBtn");
const pomoPauseBtn = document.getElementById("pomo-pauseBtn");
const pomoStopBtn = document.getElementById("pomo-stopBtn");
const pomoResetBtn = document.getElementById("pomo-resetBtn");
const swStartBtn = document.getElementById("sw-startBtn");
const swPauseBtn = document.getElementById("sw-pauseBtn");
const swStopBtn = document.getElementById("sw-stopBtn");
const swResetBtn = document.getElementById("sw-resetBtn");
const swLapBtn = document.getElementById("sw-lapBtn");
const lapList = document.getElementById("lapTimeList");
const pomodoroDisplay = document.getElementById("pomodoroTime");
const stopwatchDisplay = document.getElementById("stopwatchTime");
const studyTimeInput = document.getElementById("studyTimeInput");
const sbTimeInput = document.getElementById("sbTimeInput");
const lbTimeInput = document.getElementById("lbTimeInput");
$(document).ready(function () {
  $('input[id="tabP"]').click(function () {
    timerP.classList.add("active");
    timerS.classList.remove('active');
  });
  $('input[id="tabS"]').click(function () {
    timerP.classList.remove("active");
    timerS.classList.add('active');
  });
});
// function showVal(newVal) {
// console.log(newVal.toString());
// }
var {Timer} = require('../libraries/easytimer.js/dist/easytimer');
// var study = 25;
var study = 25;
var shortBreak = 5;
var longBreak = 30;
var loop = 1;
var pomodoroLoop = 4;
var isBreak = false;
// study: mode 0, short break: mode 1, long break: mode 2
studyTimeInput.addEventListener("input", () => {
  $('#pomodoroTime .minutes').html(studyTimeInput.value);
  $('#pomodoroTime .seconds').html(pomodoro.getTimeValues().seconds);
  study = parseInt(studyTimeInput.value);
  let all = 4 * study + 3 * shortBreak + longBreak;
  let pForMinute = 100 / all;
  let studyWidth = pForMinute * study;
  let sbWidth = pForMinute * shortBreak;
  let lbWidth = pForMinute * longBreak;
  $('.study-progress').html(study);
  $('.study-progress').css("width", studyWidth + "%");
  $('.sb-progress').css("width", sbWidth + "%");
  $('.lb-progress').css("width", lbWidth + "%");
  console.log(studyTimeInput.value);
});
sbTimeInput.addEventListener("input", () => {
  // $('#pomodoroTime .minutes').html(studyTimeInput.value);
  // $('#pomodoroTime .seconds').html(pomodoro.getTimeValues().seconds);
  shortBreak = parseInt(sbTimeInput.value);
  let all = 4 * study + 3 * shortBreak + longBreak;
  let pForMinute = 100 / all;
  let studyWidth = pForMinute * study;
  let sbWidth = pForMinute * shortBreak;
  let lbWidth = pForMinute * longBreak;
  $('.sb-progress').html(shortBreak);
  $('.study-progress').css("width", studyWidth + "%");
  $('.sb-progress').css("width", sbWidth + "%");
  $('.lb-progress').css("width", lbWidth + "%");
  console.log(sbTimeInput.value);
});
lbTimeInput.addEventListener("input", () => {
  // $('#pomodoroTime .minutes').html(studyTimeInput.value);
  // $('#pomodoroTime .seconds').html(pomodoro.getTimeValues().seconds);
  longBreak = parseInt(lbTimeInput.value);
  let all = 4 * study + 3 * shortBreak + longBreak;
  let pForMinute = 100 / all;
  let studyWidth = pForMinute * study;
  let sbWidth = pForMinute * shortBreak;
  let lbWidth = pForMinute * longBreak;
  $('.lb-progress').html(longBreak);
  $('.study-progress').css("width", studyWidth + "%");
  $('.sb-progress').css("width", sbWidth + "%");
  $('.lb-progress').css("width", lbWidth + "%");
  console.log(lbTimeInput.value);
});
// Pomodoro Timer
var pomodoro = new Timer();
$('#pomo-startBtn').click(function () {
  pomodoro.start({
    countdown: true,
    startValues: {
      seconds: study
    },
    target: {
      minutes: 0
    }
  });
  pomoStartBtn.classList.remove("running");
  pomoPauseBtn.classList.add("running");
  studyTimeInput.setAttribute("disabled", "true");
  studyTimeInput.setAttribute("disabled", "true");
  studyTimeInput.setAttribute("disabled", "true");
});
$('#pomo-pauseBtn').click(function () {
  pomodoro.pause();
  pomoPauseBtn.classList.remove("running");
  pomoStartBtn.classList.add("running");
});
$('#pomo-resetBtn').click(function () {
  loop = 1;
  isBreak = false;
  pomodoro.reset();
  pomodoro.pause();
  pomoPauseBtn.classList.remove("running");
  pomoStartBtn.classList.add("running");
});
$('#pomo-stopBtn').click(function () {
  pomodoro.stop();
  pomoPauseBtn.classList.remove("running");
  pomoStartBtn.classList.add("running");
});
pomodoro.addEventListener('secondsUpdated', function (e) {
  $('#pomodoroTime .minutes').html(pomodoro.getTimeValues().minutes);
  $('#pomodoroTime .seconds').html(pomodoro.getTimeValues().seconds);
  $('#pomodoroLoop').html(loop);
});
pomodoro.addEventListener('started', function (e) {
  $('#pomodoroTime .minutes').html(pomodoro.getTimeValues().minutes);
  $('#pomodoroTime .seconds').html(pomodoro.getTimeValues().seconds);
  $('#pomodoroLoop').html(loop);
});
pomodoro.addEventListener('reset', function (e) {
  $('#pomodoroTime .minutes').html(pomodoro.getTimeValues().minutes);
  $('#pomodoroTime .seconds').html(pomodoro.getTimeValues().seconds);
  $('#pomodoroLoop').html(loop);
});
pomodoro.addEventListener('targetAchieved', function (e) {
  if (isBreak) {
    // Executing Study
    loop = loop + 1;
    pomodoro.start({
      countdown: true,
      startValues: {
        seconds: study
      },
      target: {
        minutes: 0
      }
    });
    isBreak = false;
  } else {
    if (loop % pomodoroLoop === 0) {
      // Executing Long Break
      pomodoro.start({
        countdown: true,
        startValues: {
          seconds: longBreak
        },
        target: {
          minutes: 0
        }
      });
      isBreak = true;
    } else {
      // Executing Short Break
      pomodoro.start({
        countdown: true,
        startValues: {
          seconds: shortBreak
        },
        target: {
          minutes: 0
        }
      });
      isBreak = true;
    }
  }
});
// Stopwatch Timer
var stopWatch = new Timer();
$('#sw-startBtn').click(function () {
  stopWatch.start({
    precision: 'seconds'
  });
  swResetBtn.classList.remove("running");
  swLapBtn.classList.add("running");
  swStartBtn.classList.remove("running");
  swPauseBtn.classList.add("running");
});
$('#sw-pauseBtn').click(function () {
  stopWatch.pause();
  swResetBtn.classList.add("running");
  swLapBtn.classList.remove("running");
  swPauseBtn.classList.remove("running");
  swStartBtn.classList.add("running");
});
$('#sw-stopBtn').click(function () {
  stopWatch.stop();
  swResetBtn.classList.add("running");
  swLapBtn.classList.remove("running");
  swPauseBtn.classList.remove("running");
  swStartBtn.classList.add("running");
});
$('#sw-resetBtn').click(function () {
  stopWatch.reset();
  stopWatch.pause();
  swResetBtn.classList.add("running");
  swLapBtn.classList.remove("running");
  lapList.innerHTML = "";
  lapNum = 1;
});
var lapNum = 1;
$('#sw-lapBtn').click(function () {
  let time = stopWatch.getTimeValues().toString(['minutes', 'seconds']);
  let lap = document.createElement('li');
  lap.classList.add('lapTimeItems');
  lap.innerHTML = "Lap " + lapNum + " " + time;
  lapList.appendChild(lap);
  lapNum = lapNum + 1;
});
stopWatch.addEventListener('secondsUpdated', function (e) {
  $('#stopwatchTime').html(stopWatch.getTimeValues().toString(['minutes', 'seconds']));
});
stopWatch.addEventListener('started', function (e) {
  $('#stopwatchTime').html(stopWatch.getTimeValues().toString(['minutes', 'seconds']));
});
stopWatch.addEventListener('reset', function (e) {
  $('#stopwatchTime').html(stopWatch.getTimeValues().toString(['minutes', 'seconds']));
});
