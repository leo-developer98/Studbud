var _taskStorageJs = require('./taskStorage.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _taskStorageJsDefault = _parcelHelpers.interopDefault(_taskStorageJs);
var _labelStorageJs = require('./labelStorage.js');
var _labelStorageJsDefault = _parcelHelpers.interopDefault(_labelStorageJs);
var _kanbanStorageJs = require('./kanbanStorage.js');
var _kanbanStorageJsDefault = _parcelHelpers.interopDefault(_kanbanStorageJs);
require('../libraries/jkanban.min.js');
const taskWrapper = document.getElementById("taskWrapper");
const taskAll = document.getElementById("taskgrid");
const form = document.getElementById("taskForm");
const tasks = document.getElementById("taskList");
const labelDropdown = document.getElementById('taskLabelDropdown');
var taskDescription = document.getElementById("td");
var dueDate = document.getElementById("dd");
var completionTime = document.getElementById("ct");
var priorityRating = document.getElementById("pr");
var estimatedTime = document.getElementById("et");
var labelName = document.getElementById("newLabelInput");
var labelColour = document.getElementById("labelColourInput");
// var completionStatus = document.getElementById("cs");
// var y = priorityRating.options;
// var x = priorityRating.selectedIndex;
// var prIndex = priorityRating.options[priorityRating.selectedIndex].index;
Date.prototype.toDateInputValue = function () {
  var local = new Date(this);
  local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
  return local.toJSON().slice(0, 10);
};
const addBtn = document.getElementById('addBtn');
const addPage = document.getElementById('addTask');
const uploadBtn = document.getElementById('uploadBtn');
const closeBtn = document.getElementById('closeAdd');
const taskBtn = document.querySelector('.task_btn');
const kanban = document.getElementById('kanban');
let taskOpen = false;
// Event Listener: Task List Open
taskBtn.addEventListener('click', () => {
  if (!taskOpen) {
    taskBtn.classList.add('open');
    taskAll.classList.add('open');
    taskWrapper.classList.add('open');
    kanban.classList.add('open');
    taskOpen = true;
  } else {
    taskBtn.classList.remove('open');
    taskAll.classList.remove('open');
    taskWrapper.classList.remove('open');
    kanban.classList.remove('open');
    taskOpen = false;
  }
});
// close Task List when main page is clicked
kanban.addEventListener('click', function () {
  if (taskOpen) {
    taskBtn.classList.remove('open');
    taskAll.classList.remove('open');
    taskWrapper.classList.remove('open');
    kanban.classList.remove('open');
    taskOpen = false;
  }
});
// document.querySelectorAll('.kanban-board').forEach(element => {
// element.addEventListener('click', function (event){
// event.stopPropagation();
// console.log ('Inner div clicked!');
// });
// })
// close Add Tasks when Task Grid is clicked
taskAll.onclick = function () {
  if (addOpen) {
    addPage.classList.remove('open');
    addBtn.classList.remove('open');
    uploadBtn.classList.remove('open');
    addOpen = false;
  }
};
let addOpen = false;
// Event Listener: Open Add Page
addBtn.addEventListener('click', () => {
  if (!addOpen) {
    addPage.classList.add('open');
    addBtn.classList.add('open');
    uploadBtn.classList.add('open');
    addOpen = true;
  }
});
// Event Listener: Close Add Page
closeBtn.addEventListener('click', () => {
  if (addOpen) {
    addPage.classList.remove('open');
    addBtn.classList.remove('open');
    uploadBtn.classList.remove('open');
    addOpen = false;
  }
});
// Event Listener: Upload Tasks
uploadBtn.addEventListener("click", function (event) {
  if (addOpen) {
    event.preventDefault();
    let td = taskDescription.value;
    let dd = String(dueDate.value);
    let ct = String(completionTime.value);
    let pr = priorityRating.options[priorityRating.selectedIndex].value;
    let prIndex = priorityRating.options[priorityRating.selectedIndex].index;
    let et = estimatedTime.value;
    let cs = false;
    let label = {
      name: labelName.value,
      colour: labelColour.value
    };
    addTask(td, dd, ct, pr, prIndex, et, cs, label);
    console.log(taskList);
  }
});
// var taskList = [];
// localStorage.setItem('tasks', JSON.stringify(taskList));
// Object.keys(localStorage).forEach(function (key) {
// let task = localStorage.getItem(key);
// let taskObj = JSON.parse(task);
// showTask(taskObj);
// });
// Object.keys(localStorage).forEach(function (key) {
// let task = localStorage.getItem(key);
// let taskObj = JSON.parse(task);
// showTask(taskObj);
// });
// Task Storage
const taskStorage = new _taskStorageJsDefault.default();
const taskList = taskStorage.tasks;
// Label Storage
const labelStorage = new _labelStorageJsDefault.default();
const labelList = labelStorage.labels;
taskList.forEach(element => {
  showTask(element);
});
updateLabelDropdown();
// Updates the Empty Status for Task List and Task Label Dropdown
function updateEmpty() {
  if (taskList.length > 0) {
    document.getElementById('emptyTaskList').style.display = 'none';
  } else {
    document.getElementById('emptyTaskList').style.display = 'block';
  }
  if (labelList.length > 0) {
    document.getElementById('noLabels').style.display = "none";
  } else {
    document.getElementById('noLabels').style.display = "block";
  }
}
// Updates the label dropdown in HTML via current Label Storage
function updateLabelDropdown() {
  $('.dropdown-labels').remove();
  labelList.forEach(element => {
    let labelSelect = document.createElement('li');
    labelSelect.classList.add("dropdown-labels");
    let labelBtn = document.createElement('button');
    labelBtn.classList.add('btn');
    labelBtn.classList.add('nav_btn');
    labelBtn.classList.add('dropdown-item');
    labelBtn.classList.add('label_btns');
    labelBtn.innerHTML = element.name.toString();
    labelBtn.addEventListener('click', function (e) {
      let labelTitle = labelBtn.innerHTML;
      document.getElementById("newLabelInput").value = labelTitle.toString();
      let colour = labelStorage.getColour(labelTitle.toString());
      document.getElementById("labelColourInput").value = colour;
    });
    // add Delete Button for Labels
    let delButton = document.createElement("button");
    delButton.setAttribute('class', "btn-close");
    delButton.classList.add('deleteBtn');
    delButton.addEventListener("click", function (event) {
      event.preventDefault();
      if (confirm('Are you sure you want to delete this label from task labels?')) {
        labelStorage.delete(element);
        labelSelect.remove();
      }
    });
    labelSelect.appendChild(labelBtn);
    labelSelect.appendChild(delButton);
    labelDropdown.appendChild(labelSelect);
  });
  updateEmpty();
}
function addTask(taskDescription, dueDate, completionTime, priorityRating, priorityRatingIndex, estimatedTime, completionStatus, label) {
  let task = {
    id: Date.now(),
    taskDescription,
    dueDate,
    completionTime,
    priorityRating,
    priorityRatingIndex,
    estimatedTime,
    completionStatus,
    label
  };
  // Alert if there is no user input for the task name:
  if (document.forms["taskForm"]["taskName"].value == "") {
    alert("Task Description must be filled out");
    return false;
  } else {
    let key = task.taskDescription.toString();
    // If created task doesn't exits (task name):
    if (taskStorage.getIndexByName(key) === -1) {
      // If there is no label input, empty label for the task
      if (task.label.name == "") {
        task.label = null;
      } else {
        labelStorage.create(task.label, task.label.name, task.label.colour);
      }
      // Add a task in Task Storage
      taskStorage.create(task, key);
      showTask(task);
    } else {
      alert("Task " + key + " is already exists in the list");
    }
  }
  closeBtn.click();
}
// Kanban Storage
const kanbanStorage = new _kanbanStorageJsDefault.default();
const kanbanColumns = kanbanStorage.columns;
// Helper functions
function compareDueDate(a, b) {
  if (a.dueDate < b.dueDate) {
    return -1;
  } else if (a.dueDate > b.dueDate) {
    return 1;
  } else {
    return 0;
  }
}
function comparePriority(a, b) {
  if (a.priorityRatingIndex < b.priorityRatingIndex) {
    return -1;
  } else if (a.priorityRatingIndex > b.priorityRatingIndex) {
    return 1;
  } else {
    return 0;
  }
}
function compareEstimatedTime(a, b) {
  if (a.estimatedTime < b.estimatedTime) {
    return -1;
  } else if (a.estimatedTime > b.estimatedTime) {
    return 1;
  } else {
    return 0;
  }
}
function removeItemFromArray(arr, index) {
  if (index > -1) {
    arr.splice(index, 1);
  }
  return arr;
}
// kanbanColumns.forEach((element) => {
// kanbanBoard.addBoards(columns);
// })
var columns = [{
  id: 'toDo',
  title: "To Do",
  item: []
}, {
  id: 'inProgress',
  title: "In Progress",
  item: []
}, {
  id: 'done',
  title: "Done",
  item: []
}];
// for (let i=0; i < columns.length; i++) {
// }
var kanbanBoard = new jKanban({
  element: '#myKanban',
  // selector of the kanban container
  // gutter           : '15px',                                       // gutter of the board
  // widthBoard       : '250px',                                      // width of the board
  responsivePercentage: true,
  // if it is true I use percentage in the width of the boards and it is not necessary gutter and widthBoard
  dragItems: true,
  // if false, all items are not draggable
  boards: columns,
  // json of boards
  dragBoards: true,
  // the boards are draggable, if false only item can be dragged
  itemAddOptions: {
    enabled: false,
    // add a button to board for easy item creation
    content: '+',
    // text or html content of the board button
    class: 'kanban-title-button btn btn-default btn-xs',
    // default class of the button
    footer: false
  },
  itemHandleOptions: {
    enabled: false,
    // if board item handle is enabled or not
    handleClass: "item_handle",
    // css class for your custom item handle
    customCssHandler: "drag_handler",
    // when customHandler is undefined, jKanban will use this property to set main handler class
    customCssIconHandler: "drag_handler_icon",
    // when customHandler is undefined, jKanban will use this property to set main icon handler class. If you want, you can use font icon libraries here
    customHandler: "<span class='item_handle'>+</span> %title% "
  },
  click: function (el) {},
  // callback when any board's item are clicked
  context: function (el, event) {},
  // callback when any board's item are right clicked
  dragEl: function (el, source) {},
  // callback when any board's item are dragged
  dragendEl: function (el) {},
  // callback when any board's item stop drag
  dropEl: function (el, target, source, sibling) {},
  // callback when any board's item drop in a board
  dragBoard: function (el, source) {},
  // callback when any board stop drag
  dragendBoard: function (el) {},
  // callback when any board stop drag
  buttonClick: function (el, boardId) {}
});
